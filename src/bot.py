import telebot
import sqlite3
from apscheduler.schedulers.background import BackgroundScheduler
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from apscheduler.triggers.cron import CronTrigger
from datetime import timedelta, datetime
import pytz
import calendar
import datetime
from dotenv import load_dotenv
import os
import download_db as db
from datetime import datetime, date


load_dotenv()
bot = telebot.TeleBot(os.getenv('TELEGRAM_API_TOKEN'))

bot.remove_webhook()
bot.set_webhook()

PASSWORD_CHECK = {}
PASSWORD_UPDATE = {}

@bot.message_handler(func=lambda message: message.chat.type == 'private' and PASSWORD_CHECK.get(message.chat.id))
def check_password(message):
    if command_slash(message):
        del PASSWORD_CHECK[message.chat.id]
        return
    password = message.text
    if db.hash_password(password) == get_admin_pass():
        update_admin(message.from_user.id)
        admin_command(message)
    else:
        bot.send_message(message.chat.id, "‚ùóÔ∏è –£–ø—Å, –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin")
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    del PASSWORD_CHECK[message.chat.id]


@bot.message_handler(commands=['admin'], func=lambda message: message.chat.type == 'private')
def admin_command(message):
    if PASSWORD_UPDATE.get(message.chat.id): del PASSWORD_UPDATE[message.chat.id]

    if message.from_user.id == get_admin_id():
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        upload_button = types.KeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel‚†Ä")
        update_nick_button = types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –Ω–∏–∫‚†Ä")
        update_password_button = types.KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å‚†Ä")
        keyboard.add(upload_button, update_nick_button, update_password_button)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
   
    else:
        bot.send_message(message.chat.id, "üîê –ß—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        PASSWORD_CHECK[message.chat.id] = True



@bot.message_handler(func=lambda message: message.chat.type == 'private' and PASSWORD_UPDATE.get(message.chat.id))
def update_password(message):
    if command_slash(message):
        return
    if message.text.endswith('‚†Ä'):
        del PASSWORD_UPDATE[message.chat.id]
        handle_main_menu_option(message)
        return
    if get_admin_id() != message.from_user.id:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        new_password = message.text
        if message.text.startswith("/") or len(message.text) < 6:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
            bot.send_message(message.chat.id, "üò∂ –û–π-–æ–π, –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '/'.")
            del PASSWORD_UPDATE[message.chat.id]  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            admin_command(message)
            return
        conn = sqlite3.connect('schedule.db')
        cursor = conn.cursor()
        cursor.execute("UPDATE admin SET password = ? WHERE id = ?", (db.hash_password(new_password), 1))
        conn.commit()
        conn.close()
        bot.send_message(message.chat.id, "üîë –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω.")  
    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    del PASSWORD_UPDATE[message.chat.id]


def update_admin(admin_id):
    conn = sqlite3.connect('schedule.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("UPDATE admin SET admin_id = ? WHERE id = ?", (admin_id, 1))
    conn.commit()
    conn.close()


def get_admin():
    conn = sqlite3.connect('schedule.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM admin")
    result = cursor.fetchone()
    conn.close()
    return result

def get_admin_id():
    admin_info = get_admin()
    return admin_info['admin_id']

def get_admin_pass():
    admin_info = get_admin()
    return admin_info['password']


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ Excel
def upload_excel_function(message):
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel
    excel_path = './example/schedule.xlsx'
    bot.send_message(message.chat.id, "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx).*\n\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ª–∏—Å—Ç —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏, –∏ —É–¥–∞–ª–∏—Ç–µ –ª–µ–≥–µ–Ω–¥—É.\n_(–ø—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—é ‚¨áÔ∏è)_ ", parse_mode="Markdown" )
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª Excel
    bot.send_document(message.chat.id, open(excel_path, 'rb'))
    bot.register_next_step_handler(message,lambda m: handle_document(m)) 


def handle_document(message):
    if get_admin_id() == message.from_user.id and message.content_type == 'document':
        if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
            start_message = bot.send_message(message.chat.id, "–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª. –î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–∂–µ—á–∫–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...")
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            file_name = 'grafic.xlsx'
            with open(file_name, 'wb') as new_file:
                new_file.write(downloaded_file)
            bot.send_chat_action(message.chat.id, 'upload_document')
            if db.download_excel():
                bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. üòä", message.chat.id, start_message.message_id)
            else:
                bot.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", message.chat.id, start_message.message_id)
            for file in os.listdir('.'):
                if file.endswith('.xlsx'):
                    os.remove(file)
        else:
            bot.send_message(message.chat.id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª (.xlsx).")
    elif message.content_type != 'document':
        if message.text.endswith("‚†Ä"):
            handle_main_menu_option(message)
            return
        if command_slash(message):
            return
        bot.send_message(message.chat.id, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∑–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª (.xlsx).")        
        bot.register_next_step_handler(message,lambda m: handle_document(m))

def enter_nick(message, user_id):
    keyboard = InlineKeyboardMarkup()
    yes_button = InlineKeyboardButton(text="–î–∞", callback_data=f"yes_delete#{user_id}")
    no_button = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no_delete#")
    keyboard.add(yes_button, no_button)
    rewrite(message, f"–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∏–∫ –¥–ª—è {get_username_by_id_table(user_id)}?", keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–∞
def update_nick_function(message):
    users_without_nick = get_users_with_nick()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if users_without_nick: 
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        users_without_nick_sorted = sorted(users_without_nick, key=lambda user: db.decrypt(user['username']))
        keyboard = InlineKeyboardMarkup()
        for user in users_without_nick_sorted:
            if check_tgid_for_group(user['telegram_id']):
                user_button = InlineKeyboardButton(text=f"{db.decrypt(user['username'])} @{get_nickname_by_tgid(user['telegram_id'])}", callback_data=f"select_user#{user['id']}")
                keyboard.row(user_button)
        sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –Ω–∏–∫ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=keyboard)
        scheduler.add_job(delete_message, 'date', run_date=datetime.now() + timedelta(minutes=2), args=[sent_message.chat.id, sent_message.message_id])
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ! üòâ")

def get_users_with_nick():
    conn = sqlite3.connect('schedule.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE telegram_id IS NOT NULL")
    result = cursor.fetchall()
    conn.close()
    return result   


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"
@bot.callback_query_handler(func=lambda call: call.data in ["yes", "no"])
def callback_handler(call):
    if call.data == "yes":
        text = "*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –§.:*\n\n‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Ü–µ–ª–∏–∫–æ–º. –û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –±—É–∫–≤—É.\n_–ø—Ä–∏–º: –í–µ–Ω–µ—Ä–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ –¢._"
        rewrite(call.message, text)
        bot.register_next_step_handler(call.message,  lambda m: get_user_name(m, 1))
    elif call.data == "no":
        keyboard = types.InlineKeyboardMarkup()
        keyboard.row(types.InlineKeyboardButton("–î–∞", callback_data="yes2"),
                        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no2"))
        text = "–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º?"
        rewrite(call.message, text, keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"
@bot.callback_query_handler(func=lambda call: call.data in ["yes2", "no2"])
def callback_handler(call):
    if call.data == "yes2":
        text = "*–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –§.:*\n\n‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–∏—à–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Ü–µ–ª–∏–∫–æ–º. –û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –±—É–∫–≤—É.\n_–ø—Ä–∏–º: –í–µ–Ω–µ—Ä–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞ –¢._"
        rewrite(call.message, text)
        bot.register_next_step_handler(call.message,  lambda m: get_user_name(m, 0))
    elif call.data == "no2":
        rewrite(call.message, "–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, –æ–±—Ä–∞–±–æ—Ç–∞–ª:) –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start")
        

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Inline-–∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data.startswith("select_user#"):
        data_parts = call.data.split("#")
        user_id = int(data_parts[1])
        if get_admin_id() == call.message.chat.id:
            enter_nick(call.message, user_id)
        else:
            rewrite(call.message, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    elif call.data.startswith("yes_delete#"):
        data_parts = call.data.split('#')
        user_id = int(data_parts[1])
        if get_admin_id() == call.message.chat.id:
            delete_tg_id(user_id)
            rewrite(call.message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_username_by_id_table(user_id)} –±–æ–ª—å—à–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        else:
            rewrite(call.message, "–í—ã –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        return
    elif call.data == "no_delete#":
        rewrite(call.message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–¥–∞–ª–µ–Ω")
        return
    elif call.data.startswith("confirm_yes#"):
        data_parts = call.data.split("#")
        update_user_info(data_parts[1], call.message.chat.id, int(data_parts[2]))
        rewrite(call.message, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –¥–µ–∂—É—Ä—Å—Ç–≤–∞—Ö –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ _–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π_ –≤ –º–µ–Ω—é.")
        get_duty_menu(call.message)
    elif call.data == "confirm_no":
        rewrite(call.message, "–ö–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ. –£–¥–∞—á–∏!")
    else:
        check_button(call)
    
def check_button(call):
    if not check_tgid_for_group(call.message.chat.id) or not get_userid_by_tgid(call.message.chat.id):
        if get_userid_by_tgid(call.message.chat.id):
            delete_tg_id(call.message.chat.id)
        rewrite(call.message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    elif call.data.startswith("get_user_schedule#"):
        data_parts = call.data.split("#")
        table_id = int(data_parts[1])
        get_all_duty_sec(call.message,table_id, call.message.message_id, 1)

    elif call.data.startswith("yes_delete_me#"):
        data_parts = call.data.split('#')
        id = int(data_parts[1])
        delete_tg_id(id)
        rewrite(call.message, f"–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏—Ç–µ /start üòé")
    elif call.data == "no_delete_me#":
        rewrite(call.message, "–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É. –í—ã —Å –Ω–∞–º–∏:)")
    elif call.data == "yes_unmark":
        unmark_realization(call.message)
        get_duty_menu(call.message)
    elif call.data == "no_unmark":
        rewrite(call.message, "–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ—Å—Ç–∞–ª–∏—Å—å –≤–∫–ª—é—á–µ–Ω—ã.")
    elif call.data == "yes_mark":
        mark_realization(call.message)
        get_duty_menu(call.message)
    elif call.data == "no_mark":
        rewrite(call.message, "–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ—Å—Ç–∞–ª–∏—Å—å –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
    elif call.data.startswith("month#"):  
        _, selected_month, user_id, all_duty = call.data.split("#")  
        duty_days = get_duty_days_by_month(selected_month, int(user_id), int(all_duty))  
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è  
        duty_days_text = "\n".join(str(day) for day in duty_days) if duty_days else "–î–µ–∂—É—Ä—Å—Ç–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."  
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"  
        keyboard = types.InlineKeyboardMarkup()  
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"backtomonthselection#{user_id}#{call.message.message_id}#{all_duty}"))  
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ–∂—É—Ä—Å—Ç–≤–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"  
        rewrite(call.message, f"*{selected_month}*:\n{duty_days_text}", keyboard) 
    elif call.data.startswith("backtomonthselection#"): 
        _, user_id, message_id, all_duty = call.data.split("#")        
        get_all_duty_sec(call.message, int(user_id), int(message_id), int(all_duty))
    elif call.data.startswith("backtousersection#"):
        get_nicks_for_schedule(call.message)
    else:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")


def rewrite(message, text, keyboard=None):
    return bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,  
                            text=text,  
                            reply_markup=keyboard, parse_mode="Markdown")


def delete_tg_id(id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET telegram_id = ?, access = false WHERE id = ?", (None, id))
    conn.commit()
    conn.close()


def update_user_info(id, telegram_id, arg):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET telegram_id = ?, access = ? WHERE id = ?", (telegram_id, arg, id))
    conn.commit()
    conn.close()


@bot.message_handler(commands=['start'], func=lambda message: message.chat.type == 'private' and not PASSWORD_UPDATE.get(message.chat.id))
def start(message):
    if PASSWORD_UPDATE.get(message.chat.id): del PASSWORD_UPDATE[message.chat.id]

    if not get_group_id():
        bot.reply_to(message, "–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –µ—â–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –ø–æ–∑–∂–µ.")
        return
    user_id = message.from_user.id
    if not get_chat_member(user_id):
        bot.reply_to(message, '–û—à–∏–±–∫–∞ –≤ —Å—Ç—É–¥–∏–∏!\n\n–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –∏ –∑–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start —Å–Ω–æ–≤–∞.')
        return
    if message.from_user.username:
        if not check_table():
            bot.send_message(message.chat.id, "–û–π, –∫–∞–∂–µ—Ç—Å—è —É –º–µ–Ω—è –µ—â–µ –Ω–µ—Ç –≤–∞—à–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –ø–æ–∑–∂–µ.")
            return
        conn = sqlite3.connect('schedule.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE telegram_id = ? LIMIT 1', (user_id,))
        existing_user = cursor.fetchone()
        conn.close()
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
            keyboard = types.InlineKeyboardMarkup()
            keyboard.row(types.InlineKeyboardButton("–î–∞", callback_data="yes"),
                        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no"))
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–æ–∫
            bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –æ–ø–æ–≤–µ—â–∞–ª –≤–∞—Å –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–µ?", reply_markup=keyboard)
        else:
            get_duty_menu(message)
    else:
        bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞ –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.")


def get_duty_menu(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    profile_button = types.KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å‚†Ä")
    duties_button = types.KeyboardButton("üìÖ –ú–æ—ë –¥–µ–∂—É—Ä—Å—Ç–≤–æ‚†Ä")
    mark_button = types.KeyboardButton("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π‚†Ä")
    who_is_duty_button = types.KeyboardButton("‚ùì –ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç‚†Ä")
    keyboard.add(profile_button, duties_button, mark_button, who_is_duty_button)
    bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é.', reply_markup=keyboard)


def check_table():
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM schedule LIMIT 1')
    check = cursor.fetchone()
    conn.close()
    return True if check else False


def update_password_query(message):
    bot.send_message(message.chat.id, "–î–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ:")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    PASSWORD_UPDATE[message.chat.id] = True


@bot.message_handler(func=lambda message: message.chat.type == 'private', content_types=['text'] )
def handle_main_menu_option(message):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute('SELECT id, username FROM users WHERE telegram_id = ? LIMIT 1', (message.from_user.id,))
    res = cursor.fetchone()
    username = res[1] if res else None
    id = res[0] if res else None
    conn.close()
    if check_message_adm(message.text):
        if message.from_user.id == get_admin_id():
            if message.text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel‚†Ä":
                upload_excel_function(message)
                return
            elif message.text == "–£–¥–∞–ª–∏—Ç—å –Ω–∏–∫‚†Ä":
                update_nick_function(message)
                return
            elif message.text == "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å‚†Ä":
                update_password_query(message)
                return
        else:
            remove_menu(message.chat.id)
    if username and get_chat_member(message.from_user.id):
        if message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å‚†Ä":
            profile_click(message, message.from_user.username, username)
        elif message.text == "üìÖ –ú–æ—ë –¥–µ–∂—É—Ä—Å—Ç–≤–æ‚†Ä":
            duty_click(message)
        elif message.text == "‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π‚†Ä":
            mark_click(message)
        elif message.text == "üìç –ë–ª–∏–∂–∞–π—à–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ‚†Ä":
            get_first_duty(message, id)
        elif message.text == "üè† –ë–ª–∏–∂–∞–π—à–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π‚†Ä":
            get_duty_off(message, id)
        elif message.text == "üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚†Ä":
            get_all_duty_sec(message, id)
        elif message.text == "‚è™ –ù–∞–∑–∞–¥‚†Ä":
            get_duty_menu(message)
        elif message.text == "‚õîÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ‚†Ä":
            unmark(message)
        elif message.text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ‚†Ä":
            mark(message)
        elif message.text == "‚ùì –ö—Ç–æ –¥–µ–∂—É—Ä–∏—Ç‚†Ä":
            who_is_duty_click(message)
        elif message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚†Ä":
            profile_delete(message, id)
        elif message.text == "üî¢ –ü–æ –¥–∞—Ç–µ‚†Ä":
            bot.send_message(message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *dd.mm*\n\n*(–ø—Ä–∏–º: 12.10)*", parse_mode="Markdown")
            bot.register_next_step_handler(message,  lambda m: get_duties_by_date(m))
        elif message.text == "üë§ –ü–æ –Ω–∏–∫—É‚†Ä":
            get_nicks_for_schedule(message)
    elif message.from_user.id == get_admin_id():
        return
    elif username and message.text.endswith("‚†Ä"):
        remove_user_id(message.from_user.id)
        remove_menu(message.chat.id)
    elif message.text.endswith("‚†Ä"):
        remove_menu(message.chat.id)


def profile_click(message, tg_name, username):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    delete_profile = types.KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å‚†Ä")
    back_button = types.KeyboardButton("‚è™ –ù–∞–∑–∞–¥‚†Ä")
    keyboard.add(delete_profile, back_button)
    bot.send_message(message.chat.id, f"üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db.decrypt(username)}\n#Ô∏è‚É£–ù–∏–∫: @{tg_name}",reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –ø–æ –Ω–∏–∫—É
def get_nicks_for_schedule(message):
    users_with_nick = get_users_with_nick()  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if users_with_nick: 
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∏–∫–Ω–µ–π–º–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
        nicknames = [get_nickname_by_tgid(user['telegram_id']) for user in users_with_nick if get_nickname_by_tgid(user['telegram_id']) is not None]
        sorted_nicknames = sorted(nicknames, key=lambda x: x.lower())

        keyboard = InlineKeyboardMarkup()
        for nickname in sorted_nicknames:
            for user in users_with_nick:
                if get_nickname_by_tgid(user['telegram_id']) == nickname and check_tgid_for_group(user['telegram_id']):
                    user_button = InlineKeyboardButton(text=f"@{nickname}", callback_data=f"get_user_schedule#{user['id']}")
                    keyboard.row(user_button)
                    break

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:"
        if message.text == "üë§ –ü–æ –Ω–∏–∫—É‚†Ä":
            bot.send_message(message.chat.id, text, reply_markup=keyboard)
        else:
            rewrite(message, text, keyboard)
    else:
        bot.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—â–µ –Ω–µ —É—Å–ø–µ–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∑–∂–µ! üòâ")


def check_message_adm(text):
    return text == "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel‚†Ä" or text == "–£–¥–∞–ª–∏—Ç—å –Ω–∏–∫‚†Ä" or text == "–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å‚†Ä"


def remove_menu(chat_id):
    bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", reply_markup=types.ReplyKeyboardRemove())


def remove_user_id(telegram_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET telegram_id = ? WHERE telegram_id = ?", (None, telegram_id))
    conn.commit()
    conn.close()


def unmark_realization(message):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET access = ? WHERE telegram_id = ?", (0, message.chat.id))
    conn.commit()
    conn.close()
    rewrite(message, "–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–µ.")


def unmark(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("–î–∞", callback_data=f"yes_unmark"),
                        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no_unmark"))            
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–æ–∫
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π?", reply_markup=keyboard)


def profile_delete(message, id):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("–î–∞", callback_data=f"yes_delete_me#{id}"),
                        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no_delete_me#"))            
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–æ–∫
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?", reply_markup=keyboard)


def mark(message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("–î–∞", callback_data=f"yes_mark"),
                        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no_mark"))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–º–µ—Ç–æ–∫
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ?", reply_markup=keyboard)


def mark_realization(message):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET access = ? WHERE telegram_id = ?", (1, message.chat.id))
    conn.commit()
    conn.close()
    rewrite(message, "–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–µ.")


def mark_click(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute('SELECT access FROM users WHERE telegram_id = ? LIMIT 1', (message.from_user.id,))
    res_access = cursor.fetchone()
    access = res_access[0] if res_access else None
    conn.close()
    back_button = types.KeyboardButton("‚è™ –ù–∞–∑–∞–¥‚†Ä")
    str =""
    if access:
        turn_of_button = types.KeyboardButton("‚õîÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ‚†Ä")
        str = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã."
    else:
        turn_of_button = types.KeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ‚†Ä")
        str = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
    keyboard.add(turn_of_button, back_button)
    bot.send_message(message.chat.id, str , reply_markup=keyboard)


def duty_click(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    first_duty_button = types.KeyboardButton("üìç –ë–ª–∏–∂–∞–π—à–µ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ‚†Ä")
    first_day_off_button = types.KeyboardButton("üè† –ë–ª–∏–∂–∞–π—à–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π‚†Ä")
    all_duty_button = types.KeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚†Ä")
    back_button = types.KeyboardButton("‚è™ –ù–∞–∑–∞–¥‚†Ä")
    keyboard.add(first_duty_button, first_day_off_button, all_duty_button, back_button)
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',reply_markup=keyboard)


def who_is_duty_click(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    by_date_button = types.KeyboardButton("üî¢ –ü–æ –¥–∞—Ç–µ‚†Ä")
    by_nick_button = types.KeyboardButton("üë§ –ü–æ –Ω–∏–∫—É‚†Ä")
    back_button = types.KeyboardButton("‚è™ –ù–∞–∑–∞–¥‚†Ä")
    keyboard.add(by_date_button, by_nick_button, back_button)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ–∂—É—Ä—Å—Ç–≤–∞.',reply_markup=keyboard)

def command_slash(message):
    if message.text.startswith("/"):
        if message.text == "/start":
            start(message)
        elif message.text == "/admin":
            admin_command(message)
        else:
            bot.reply_to(message, '–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ /start')
        return True
    return False


def get_user_name(message,access):
    if message.content_type != 'text':
        bot.reply_to(message, '–•–ºü§î, –∫–∞–∂–µ—Ç—Å—è —Ç—É—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –§. –µ—â–µ —Ä–∞–∑.')
        bot.register_next_step_handler(message,lambda m: get_user_name(m, access))
        return
    if command_slash(message):
        return
    user_name = message.text.strip()
    if user_name[-1] != '.':
        user_name += '.'
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE username = ? LIMIT 1', (db.encrypt(user_name),))
    existing_user = cursor.fetchone()
    if not existing_user:
        bot.reply_to(message, '–•–ºü§î, –∫–∞–∂–µ—Ç—Å—è —Ç—É—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –≤–µ—Ä–Ω–æ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ –§. –µ—â–µ —Ä–∞–∑.')
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
        bot.register_next_step_handler(message,lambda m: get_user_name(m, access))
    elif existing_user[2] is not None:
        bot.reply_to(message, '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç id. –ï—Å–ª–∏ —ç—Ç–æ –≤—ã, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–¥–∞–ª–∏—Ç—å –≤–∞—à –ø—Ä–æ—à–ª—ã–π id. ')
    else:
        cursor.execute('SELECT * FROM users WHERE telegram_id = ? LIMIT 1', (message.from_user.id,))
        check_id = cursor.fetchone()
        if not check_id:
            send_registration_confirmation(message, existing_user[0], user_name, access)
        else:
            bot.reply_to(message, "–í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º id —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
    conn.close()


def send_registration_confirmation(message, user_id,  username, access):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.row(types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_yes#{user_id}#{access}"),
                 types.InlineKeyboardButton("–ù–µ—Ç", callback_data="confirm_no"))
    bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! {username}, —Ç–µ–ø–µ—Ä—å –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø–æ –Ω–∏–∫—É @{message.from_user.username}, –≤–µ—Ä–Ω–æ?", reply_markup=keyboard)


def get_duty_days_by_month(month, user_id, all_duty=0):
    today = date.today()
    month_number = {
        '–Ø–Ω–≤–∞—Ä—å': '01',
        '–§–µ–≤—Ä–∞–ª—å': '02',
        '–ú–∞—Ä—Ç': '03',
        '–ê–ø—Ä–µ–ª—å': '04',
        '–ú–∞–π': '05',
        '–ò—é–Ω—å': '06',
        '–ò—é–ª—å': '07',
        '–ê–≤–≥—É—Å—Ç': '08',
        '–°–µ–Ω—Ç—è–±—Ä—å': '09',
        '–û–∫—Ç—è–±—Ä—å': '10',
        '–ù–æ—è–±—Ä—å': '11',
        '–î–µ–∫–∞–±—Ä—å': '12'
    }
    duty_info = {
        '—É': '—É—Ç—Ä–æ',
        '–≤': '–≤–µ—á–µ—Ä',
        '–Ω': 'üè†'
    }
    conn = sqlite3.connect('schedule.db') 
    cursor = conn.cursor() 
    if all_duty:
        cursor.execute('''
        SELECT date, duty FROM schedule WHERE strftime("%m", date) = ? AND user_id = ? ORDER BY date
    ''', (month_number.get(month), user_id))
    else:
        cursor.execute('''
        SELECT date, duty FROM schedule WHERE strftime("%m", date) = ? AND date >= ? AND user_id = ? ORDER BY date
    ''', (month_number.get(month), today.isoformat(), user_id))
    duty_dates = cursor.fetchall() 
    formatted_dates = []
    conn.close()
    for dat, type in duty_dates:
        formatted_dates.append(f"\t\t{format_date(dat)}\t\t|\t\t{duty_info[type]}")
    return formatted_dates


def get_all_duty_sec(message, user_id, message_id=None, all_duty=0):  # –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥, —Ç–æ 1, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ —Ç–æ –Ω–æ–ª—å
    month_names_mapping = {
    'January': '–Ø–Ω–≤–∞—Ä—å',
    'February': '–§–µ–≤—Ä–∞–ª—å',
    'March': '–ú–∞—Ä—Ç',
    'April': '–ê–ø—Ä–µ–ª—å',
    'May': '–ú–∞–π',
    'June': '–ò—é–Ω—å',
    'July': '–ò—é–ª—å',
    'August': '–ê–≤–≥—É—Å—Ç',
    'September': '–°–µ–Ω—Ç—è–±—Ä—å',
    'October': '–û–∫—Ç—è–±—Ä—å',
    'November': '–ù–æ—è–±—Ä—å',
    'December': '–î–µ–∫–∞–±—Ä—å'
    }
    unique_months = set()
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –¥–µ–∂—É—Ä—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    duty_morn = get_user_duty(user_id, '—É', False, all_duty)
    duty_even = get_user_duty(user_id, '–≤', False, all_duty)
    duty_week = get_user_duty(user_id, '–Ω', False, all_duty)
    for dat in duty_morn:
        date_datetime = datetime.strptime(dat, "%Y-%m-%d")
        month_name = date_datetime.strftime('%B')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        unique_months.add(month_name)
    for dat in duty_even:
        date_datetime = datetime.strptime(dat, "%Y-%m-%d")
        month_name = date_datetime.strftime('%B')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        unique_months.add(month_name)
    for dat in duty_week:
        date_datetime = datetime.strptime(dat, "%Y-%m-%d")
        month_name = date_datetime.strftime('%B')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
        unique_months.add(month_name)
    months_in_order = list(calendar.month_name[1:])
    unique_months = [month for month in months_in_order if month in unique_months]
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã Inline
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏–∑ unique_months
    for month in unique_months:
        ru_month = month_names_mapping.get(month)
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        button = types.InlineKeyboardButton(text=ru_month, callback_data=f"month#{ru_month}#{user_id}#{all_duty}")
        keyboard.add(button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π Inline
    if (all_duty==1):
        button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"backtousersection#{user_id}")
        keyboard.add(button)
    if len(unique_months)==0:
        bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤ –Ω–∞ —ç—Ç–æ—Ç –≥–æ–¥! ", reply_markup=keyboard)
    else: 
        if message_id and all_duty: 
            if (get_nickname_by_tgid(get_tgid_by_id(user_id))==None):
                button_only = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"backtousersection#{user_id}")
                keyboard_only = types.InlineKeyboardMarkup(row_width=1)
                keyboard_only.add(button_only)
                rewrite(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", keyboard_only)
            else:
                rewrite(message, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è @{get_nickname_by_tgid(get_tgid_by_id(user_id))}:", keyboard)
        elif message_id:
            rewrite(message, f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", keyboard)
        else: 
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)


def get_user_duty(user_id, time, limit=False, all_duty=None):
    today = date.today()
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    if all_duty==1:
        cursor.execute(f"SELECT date FROM schedule WHERE duty = ? AND user_id = ?", (time,  user_id))
    else:
        if (limit == False):
            cursor.execute(f"SELECT date FROM schedule WHERE duty = ? AND user_id = ? and date>= ?", (time,  user_id, today.isoformat()))
        else:
            cursor.execute(f"SELECT date FROM schedule WHERE duty = ? AND user_id = ? and date > ? LIMIT 1", (time,  user_id, today.isoformat()))
    rows = cursor.fetchall()
    conn.close()
    if rows:
        return [row[0] for row in rows]
    return []


def format_date(date):
    return datetime.strptime(date, '%Y-%m-%d').strftime("%d.%m.%Y")


def get_first_duty(message, user_id):
    today = date.today()
    conn = sqlite3.connect('schedule.db') 
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM schedule WHERE user_id = ? AND date > ? AND duty != '–Ω' ORDER BY date LIMIT 1", (user_id, today.isoformat()))
    existing = cursor.fetchone()
    conn.close()
    if existing:
        time = '‚òÄÔ∏è  —É—Ç—Ä–æ: ' if existing[2] == '—É' else 'üåë  –≤–µ—á–µ—Ä: '
        bot.send_message(message.chat.id, f'{time} {format_date(existing[0])}')
    else:
        bot.send_message(message.chat.id, '–î–µ–∂—É—Ä—Å—Ç–≤–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! üéâ –ù–æ –Ω–∞—à–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥!')


def get_duty_off(message, user_id):
    list = get_user_duty(user_id, '–Ω', 1)
    if len(list):
        bot.send_message(message.chat.id, f'üè†  –≤—ã—Ö–æ–¥–Ω–æ–π: {format_date(list[0])}')
    else:
        bot.send_message(message.chat.id, '–û–π, —É –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –≤ —ç—Ç–æ–º –≥–æ–¥—É! üò¢ –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º!')



@bot.message_handler(commands=['adm'], func=lambda message: message.chat.type != 'private')
def start_root(message):
    if message.from_user.id == get_admin_id():
        text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤—Å–µ—Ö!\n–Ø –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–µüòâ"
        conn = sqlite3.connect('schedule.db') 
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM bot_groups")
        existing_group = cursor.fetchone()
        if not existing_group:
            cursor.execute("INSERT INTO bot_groups (group_id) VALUES (?)", (message.chat.id,))
            bot.send_message(message.chat.id, text)
        else:
            if existing_group[1] == message.chat.id:
                bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
            else:
                cursor.execute("UPDATE bot_groups SET group_id = ? WHERE id = ?", (message.chat.id, existing_group[0]))
                bot.send_message(message.chat.id, text)
        conn.commit()
        conn.close()


def get_username_by_id_table(id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("SELECT username FROM users WHERE id = ?", (id,))
    username = cursor.fetchone()[0]
    conn.close()
    return db.decrypt(username)


def get_nickname_by_tgid(telegram_id):
    try:
        chat_member = get_chat_member(telegram_id)
        if chat_member:
            return chat_member.user.username
    except Exception as e:
        print(f"Error: {e}")
    return None


def get_chat_member(telegram_id):
    group_id = get_group_id()
    if group_id:
        return is_user_in_chat(group_id, telegram_id)
    return None


def is_user_in_chat(chat_id, telegram_id):
    try:
        chat_member = bot.get_chat_member(chat_id, telegram_id)
        return chat_member if chat_member.status != 'left' else False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–ª–µ–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def check_tgid_for_group(telegram_id):
    if not get_chat_member(telegram_id):
        delete_tg_id(telegram_id)
        return False
    return True

def get_tgid_by_id(user_id):   
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users WHERE id = ?", (user_id,))
    telegram_id = cursor.fetchone()
    conn.close()
    return telegram_id[0] if telegram_id else telegram_id


def get_userid_by_tgid(telegram_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
    user_id = cursor.fetchone()
    conn.close()
    return user_id[0] if user_id else user_id


def format_date_without_year(date):  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –±–µ–∑ –≥–æ–¥–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π
    return date.strftime("%d\.%m")


def send_duty_message(day, arg):
    users_tomorrow = text_get_duties_by_date(day)
    message_text = "–ù–∞–ø–æ–º–∏–Ω–∞—éü§´\n\n"
    message_text += "–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞ " if arg == 0 or arg == "—Å–±" else "–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ " if arg == "–≤—Å" else "–ì—Ä–∞—Ñ–∏–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ "
    date_text = f"||\( {format_date_without_year(day)} \)||"
    if users_tomorrow == "–î–µ–∂—É—Ä—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.":
        return
    message_text += date_text + ":\n" + users_tomorrow
    sent_message = bot.send_message(get_group_id(), message_text, parse_mode="MarkdownV2") 
    if sent_message:
        add_message_id(day, sent_message.message_id)


def add_message_id(day, message_id):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO message (date, message_id) VALUES (?, ?)", (day.isoformat(), message_id))
    conn.commit()
    conn.close


def send_daily_message():
    today = date.today() 
    tomorrow = today + timedelta(days=1)
    
    if today.weekday() != 5 and today.weekday() != 6:
        if today.weekday() != 4:
            send_duty_message(tomorrow, 0)
        else:
            send_duty_message(tomorrow, "—Å–±")
            send_duty_message(tomorrow + timedelta(days=1), "–≤—Å")
            send_duty_message(tomorrow + timedelta(days=2), "–ø–Ω")        


def delete_message_from_group():
    day = date.today()
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute("SELECT message_id FROM message WHERE date <= ?", (day.isoformat(), ))
    messages = cursor.fetchone()
    if messages:
        delete_message(get_group_id(), messages[0])
        cursor.execute("DELETE  FROM message WHERE date <= ?", (day.isoformat(),))
        conn.commit()
    conn.close()        


def delete_message(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")   


def get_users_with_status(day):
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    day = day.strftime('%Y-%m-%d')
    cursor.execute(f"SELECT user_id, duty FROM schedule WHERE date = ?", (day,))
    duties = cursor.fetchall()
    users_map = {}
    for user_id, duty in duties:
        users_map[user_id] = duty
    conn.close()
    return users_map


def text_get_duties_by_date(date_obj, case = 1): # 1 - daily, 2 - –ø–æ –¥–∞—Ç–µ
    message_text = ""
    users_map = get_users_with_status(date_obj)
    # Sort users by duty
    existing_duties = set(users_map.values())
    duty_order = {'—É': 0, '–≤': 1, '–Ω': 2}
    sorted_duties = sorted(existing_duties, key=lambda x: duty_order.get(x, float('inf')))
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    for duty in sorted_duties:
        for user_id, user_duty in users_map.items():
            if user_duty == duty:
                if case == 1:
                    cursor.execute("SELECT telegram_id FROM users WHERE id = ? and access = TRUE", (user_id,))
                else:
                    cursor.execute("SELECT telegram_id FROM users WHERE id = ?", (user_id,))
                telegram_id = cursor.fetchone()
                if telegram_id and telegram_id[0] and check_tgid_for_group(telegram_id[0]):
                    nickname = get_nickname_by_tgid(telegram_id[0])
                else:
                    nickname = "unkn–æwn"
                if duty == '—É':
                    message_text += f"‚òÄÔ∏è —É—Ç—Ä–æ: @{nickname}\n"
                elif duty == '–≤':
                    message_text += f"üåë –≤–µ—á–µ—Ä: @{nickname}\n"
                else:
                    message_text += f"üè° –≤—ã—Ö–æ–¥–Ω–æ–π: @{nickname}\n"
    conn.close()
    if (message_text==""):
        message_text="–î–µ–∂—É—Ä—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    return message_text


def get_duties_by_date(message):
    try:
        if message.content_type != 'text':
            raise ValueError("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        if message.text.endswith("‚†Ä"):
            handle_main_menu_option(message)
            return
        if command_slash(message):
            return
        date_str = message.text.strip().replace(" ", "")
        if date_str.endswith('.'):
            date_str = date_str[:-1]
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞ –±–µ–∑ –≥–æ–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
        if len(date_str.split(".")) == 2:
           date_str += "." + str(datetime.now().year)

        parts = date_str.split(".")
        if len(parts) < 3:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
        for i in range(2):
            if len(parts[i]) == 1:
                parts[i] = "0" + parts[i]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≥–æ–¥–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Ü–∏—Ñ—Ä
        
        if len(parts[-1]) == 2:
            parts[-1] = "20" + parts[-1]
        date_str = ".".join(parts)
        date_obj = datetime.strptime(date_str, "%d.%m.%Y")
       
        if date_obj.year != datetime.now().year:
            raise ValueError

        message_text = f"–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ {date_obj.strftime('%d.%m.%Y')}:\n\n"
        res_users=text_get_duties_by_date(date_obj, 2)
        if (res_users=="–î–µ–∂—É—Ä—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."):
            bot.send_message(message.chat.id, f"–ö–∞–∂–µ—Ç—Å—è, –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É ( {date_obj.strftime('%d.%m.%Y')} ) –¥–µ–∂—É—Ä—Å—Ç–≤ –Ω–µ—Ç.")
        else:
            message_text+=res_users
            bot.send_message(message.chat.id, message_text)   
        bot.register_next_step_handler(message,  lambda m: get_duties_by_date(m))

    except ValueError:
        bot.send_message(message.chat.id, "–•–º, –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ?\n\nüëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –≤—ã–≥–ª—è–¥–µ–ª–∞ –∫–∞–∫ *12.10* –∏ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ - –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å *–≤ –Ω–∞—à–µ–º –≥—Ä–∞—Ñ–∏–∫–µ*!", parse_mode="Markdown" )
        bot.register_next_step_handler(message,lambda m: get_duties_by_date(m))

def get_group_id():
    conn = sqlite3.connect('schedule.db')
    cursor = conn.cursor()
    cursor.execute(f"SELECT group_id FROM bot_groups")
    group_id = cursor.fetchone()
    if group_id: group_id = group_id[0]
    conn.close()
    return group_id


scheduler = BackgroundScheduler()
# # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
moscow_tz = pytz.timezone('Europe/Moscow')
# # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —É–¥–∞–ª–µ–Ω–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 14:58 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
scheduler.add_job(delete_message_from_group, CronTrigger(hour=14, minute=58, second=0, timezone=moscow_tz))
# # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 15:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
scheduler.add_job(send_daily_message, CronTrigger(hour=15, minute=00, second=0, timezone=moscow_tz))
# # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.start()

if __name__ == "__main__":
    db.create_database()
    bot.polling()